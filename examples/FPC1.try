THEORY FPC1
load_theory Arithmetic
load_haskell FPC1

THEOREM: lengths_add xs ys

            length (xs++ys)  ===  length xs ++ length ys

PROOF: induction xs

BASE:  xs = []

            length ([]++ys)  ===  length [] + length ys

BASE-PROOF: reduce_both

LHS:

length ([]++ys)
 = defn.1 @ ++ 1
length ys

RHS:

length [] + length ys
 = defn.1 length @ 1
0 + length ys
 = add_left_zero l2r @ + 1
length ys

BASE-QED

STEP: xs --> (x:xs)

ASSUME:
             length (xs++ys)  ===  length xs ++ length ys

SHOW:
         length ((x:xs)++ys)  ===  length (x:xs) ++ length ys

STEP-PROOF: reduce-both

LHS:

length ((x:xs)++ys)
 = defn.2 @ ++ 1
length (x:(xs++ys))
 = defn.2 @ length 1
1 + length (xs++ys)

RHS:

length (x:xs) ++ length ys
 = defn.2 @ length 1
(1 + length xs) ++ length ys
 = add_assoc l2r
1 + (length xs ++ length ys)
 = lengths_add.assume r2l @ +.2 1
1 + length (xs++ys)

STEP-QED

QED lengths_add
