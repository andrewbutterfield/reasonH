import FPC1
import Arithmetic

conjecture lengths_add xs ys   =  length (xs++ys)  ==  length xs ++ length ys

prove lengths_add by induction on xs

base xs = []
is length ([]++ys)  ==  length [] + length ys

prove lengths_add.base by reduce-both

left

length ([]++ys)
 = defn.1 ++ @ 1
length ys

right

length [] + length ys
 = defn.1 length @ 1
0 + length ys
 = add_left_zero @ 1
length ys

QED lengths_add.base


step from xs to (x:xs)
is assume length (xs++ys)  ==  length xs ++ length ys
to show length ((x:xs)++ys)  ==  length (x:xs) ++ length ys


prove lengths_add.step by reduce-both

left

length ((x:xs)++ys)
 = defn.2 ++ @ 1
length (x:(xs++ys))
 = defn.2 length @ 1
1 + length (xs++ys)

right

length (x:xs) ++ length ys
 = defn.2 length @ 1
(1 + length xs) ++ length ys
 = add_assoc l2r
1 + (length xs ++ length ys)
 = lengths_add.assume r2l
1 + length (xs++ys)

QED lengths_add.step

QED lengths_add
