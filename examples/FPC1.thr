THEORY FPC1

IMPORT-THEORY Arithmetic
IMPORT-THEORY List
IMPORT-HASKELL FPC1

THEOREM lengths_add

            length (xs++ys)  ==  length xs ++ length ys

STRATEGY induction List xs

BASE  xs = []

            length ([]++ys)  ==  length [] + length ys

STRATEGY reduce-both

LHS

length ([]++ys)
 = DEF ++.1
length ys

RHS

length [] + length ys
 = DEF length.1 @ length 1
0 + length ys
 = LAW add_left_zero l2r
length ys

QED BASE

STEP xs --> (x:xs)

ASSUME
             length (xs++ys)   ==   length xs ++ length ys

SHOW
         length ((x:xs)++ys)  ==  length (x:xs) ++ length ys

STRATEGY reduce-both

LHS

length ((x:xs)++ys)
 = DEF ++.2
length (x:(xs++ys))
 = DEF length.2
1 + length (xs++ys)

RHS

length (x:xs) ++ length ys
 = DEF length.2 @ length 1
(1 + length xs) ++ length ys
 = LAW add_assoc l2r
1 + (length xs ++ length ys)
 = INDHYP r2l @ ++ 1
1 + length (xs++ys)

QED STEP

QED lengths_add
